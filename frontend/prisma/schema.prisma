datasource db {
    provider = "postgresql"
    url      = "postgresql://uptjvnpyxv8c3:6d^$O)%k%~4l@devstudios.io:5432/dbkh9lqtx4zdpc"
}

model Addresses {
    id             String     @id @db.Uuid
    userID         Int?
    addressLineOne String     @db.VarChar(120)
    addressLineTwo String     @db.VarChar(120)
    mobile         String     @unique @db.VarChar(30)
    city           String     @db.VarChar(120)
    country        String     @db.VarChar(120)
    postalCode     String     @db.VarChar(16)
    createdAt      DateTime   @db.Timestamptz(6)
    updatedAt      DateTime   @db.Timestamptz(6)
    Users          Users?     @relation(fields: [userID], references: [telegramID])
    Payments       Payments[]
}

model Carts {
    orderID   String   @db.Uuid
    productID String   @db.Uuid
    quantity  Int
    createdAt DateTime @db.Timestamptz(6)
    updatedAt DateTime @db.Timestamptz(6)
    Orders    Orders   @relation(fields: [orderID], references: [id])
    Products  Products @relation(fields: [productID], references: [id])

    @@id([orderID, productID])
}

model Categories {
    id        String     @id @db.Uuid
    name      String     @db.VarChar(120)
    image     String     @db.VarChar(100)
    shopID    Int?
    createdAt DateTime   @db.Timestamptz(6)
    updatedAt DateTime   @db.Timestamptz(6)
    Shops     Shops?     @relation(fields: [shopID], references: [botID])
    Products  Products[]
}

model Chats {
    userID    Int
    shopID    Int
    chatID    Int
    createdAt DateTime @db.Timestamptz(6)
    updatedAt DateTime @db.Timestamptz(6)
    Shops     Shops    @relation(fields: [shopID], references: [botID])
    Users     Users    @relation(fields: [userID], references: [telegramID])

    @@id([userID, shopID])
}

model Notes {
    id        Int       @id @default(autoincrement())
    paymentID String?   @db.Uuid
    text      String
    createdAt DateTime  @db.Timestamptz(6)
    updatedAt DateTime  @db.Timestamptz(6)
    Payments  Payments? @relation(fields: [paymentID], references: [id])
}

model Orders {
    id        String             @id @db.Uuid
    userID    Int?
    shopID    Int?
    status    enum_Orders_status @default(PENDING)
    createdAt DateTime           @db.Timestamptz(6)
    updatedAt DateTime           @db.Timestamptz(6)
    Shops     Shops?             @relation(fields: [shopID], references: [botID])
    Users     Users?             @relation(fields: [userID], references: [telegramID])
    Carts     Carts[]
    Payments  Payments[]
}

model Payments {
    id           String     @id @db.Uuid
    orderID      String?    @db.Uuid
    addressID    String?    @db.Uuid
    deliveryDate String     @db.VarChar(15)
    createdAt    DateTime   @db.Timestamptz(6)
    updatedAt    DateTime   @db.Timestamptz(6)
    Addresses    Addresses? @relation(fields: [addressID], references: [id])
    Orders       Orders?    @relation(fields: [orderID], references: [id])
    Notes        Notes[]
}

model Products {
    id          String      @id @db.Uuid
    name        String      @db.VarChar(120)
    description String
    image       String      @db.VarChar(200)
    price       Decimal     @db.Decimal(10, 2)
    quantity    Int
    categoryID  String?     @db.Uuid
    createdAt   DateTime    @db.Timestamptz(6)
    updatedAt   DateTime    @db.Timestamptz(6)
    Categories  Categories? @relation(fields: [categoryID], references: [id])
    Carts       Carts[]
}

model Shops {
    botID      Int          @id
    name       String       @db.VarChar(120)
    image      String?      @db.VarChar(100)
    botToken   String       @db.VarChar(60)
    ownerID    Int?
    createdAt  DateTime     @db.Timestamptz(6)
    updatedAt  DateTime     @db.Timestamptz(6)
    Users      Users?       @relation(fields: [ownerID], references: [telegramID])
    Categories Categories[]
    Chats      Chats[]
    Orders     Orders[]
    Vouchers   Vouchers[]
}

model Users {
    telegramID   Int            @id
    name         String         @db.VarChar(120)
    isOwner      Boolean        @default(false)
    createdAt    DateTime       @db.Timestamptz(6)
    updatedAt    DateTime       @db.Timestamptz(6)
    Addresses    Addresses[]
    Chats        Chats[]
    Orders       Orders[]
    Shops        Shops[]
    VoucherUsers VoucherUsers[]
}

model VoucherUsers {
    isClaimed Boolean
    voucherID String   @db.Uuid
    userID    Int
    createdAt DateTime @db.Timestamptz(6)
    updatedAt DateTime @db.Timestamptz(6)
    Users     Users    @relation(fields: [userID], references: [telegramID])
    Vouchers  Vouchers @relation(fields: [voucherID], references: [id])

    @@id([voucherID, userID])
}

model Vouchers {
    id           String         @id @db.Uuid
    code         String
    discount     Int
    isValid      Boolean
    shopID       Int?
    createdAt    DateTime       @db.Timestamptz(6)
    updatedAt    DateTime       @db.Timestamptz(6)
    Shops        Shops?         @relation(fields: [shopID], references: [botID])
    VoucherUsers VoucherUsers[]
}

enum enum_Orders_status {
    PENDING
    COMPLETED
}
